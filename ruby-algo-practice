# replace all spaces with %20
def replace(str)
  str.split(' ').join('%20')
end

# 2 strings are anagrams
# 1st way to do it
def anagrams?(str1, str2)
  str1.chars.sort == str2.chars.sort
end

# 2nd way to do it
def anagrams?(str1, str2)
  str1.chars.all? do |letter|
  str2.chars.include?(letter)
end

# Remove string dups without an additional buffer
def remove_dups(str)
  res = ''
  dups = ''
  i = 0
  while i < str.length
    j = i + 1
    while j < str.length
      dups << str[i] if str[i] == str[j]
      res << str[i] if str[i] == str[j]
      j += 1
    end
    res << str[i] unless dups.include?(str[i])
    i += 1
    end
    
  res
end

# Reverse a string
# transverse the whole string method
def my_reverse(str)
  res = ''
  str.each_char do |letter|
    res.shift(letter)
  end
  
  res
end

# in place method
def my_reverse(str)
  i = 0
  j = 0
  
  while i < j
    str[i], str[j] = str[j], str[i]
    i += 1
    j -= 1
  end
  
  str
end

# check for all uniques
def uniques?(str)
  alpha = ('a'..'z').to_a
  str.each_char do |letter|
    return false unless alpha.delete(letter)
end
  
  true
end

def uniques?(str)
  alpha = Hash.new(0)
  str.each_char do |letter|
    alpha[letter] += 1
  end
  alpha.values.none? { |v| v > 1 }
end

# Assume you have a method isSubstring which checks if one word is a substring of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”).

def is_substring?(str1, str2)
  return false unless str1.length == str2.length
  (str2 + str2).include?(str1)
end

# rotate array by 90 degrees
def rotate_arr(a)
    res = []
    a.transpose.each do |row|
        res << row.reverse
    end
    res
end

# find 1st duplicate of an array
def firstDuplicate(a)
    dups = Hash.new(0)
    idx = Hash.new
    index = a.length
    
    a.each_with_index do |el, i|
       dups[el] += 1
        idx[el] = i unless dups[el] > 2
    end
    
    return -1 unless dups.values.any? {|val| val > 1}
    
    dup_vals = dups.map {|k, v| k if v > 1}.compact
    dup_vals.each do |el|
       index = idx[el] if idx[el] < index
    end
    
    a[index]
end

# find the nth to last element in a singly linked list
def nth_to_last(head, n)
  return nil if head.nil? || n < 1
  p1 = head
  p2 = head
  i = 0
  
  while i < n - 1
    return nil if p2.nil?
    p2 = p2.next
  end
  
  while p2.next
    p1 = p1.next
    p2 = p2.next
  end
  
  p1
end

# delete duplicates in a singly linked list
def delete_dupes(head)
  return nil if head.nil?
  
  previous = head
  current = previous.next
  while current
    runner = head
    while runner != current
      if runner.val == current.val
        tmp = current.next
        previous.next = tmp
        current = tmp
       end
       if runner == current
        previous = current
        current = current.next
       end
    end
  end
end

def is_palendrome?(str)
  idx1 = 0
  idx2 = -1
  
  while idx1 < str.length / 2
    return false if str[idx1] != str[idx2]
    idx1 += 1
    idx2 -= 1
  end
  
  true
end

print is_palendrome?("aca")
print is_palendrome?("baaa")

Def longest_sunstring(str)
  Sub_arr = [str[0]]
  Longest = 0
  Str[1..-1].each_char do |letter|
     Unless sub_arr.include?(letter)
         Sub_arr.push(letter)
     Else
          Longest = sub_arr.length if sur_arr.length > longest 
           Sub_arr = [letter]
      End
   End
  Longest
End

def duplicates(arr)
  counter_hash = Hash.new(0)
  arr.each do |el|
    counter_hash[el] += 1
  end
  
  counter_hash.select { |key, value| value > 1 }.keys
end 

p duplicates([1, 2, 1, 3, 4, 2])
p duplicates(["hi", "bye", "hi", "hello", "waaaazzzzupppp", "bye"])

def longest_substring(str)
  current_max = ''
  longest_max = ''
  
  str.each_char do |letter|
    current_max = '' if current_max.index(letter)
    current_max << letter
    longest_max = current_max if current_max.length > longest_max.length
  end
  
  longest_max.length
end

puts longest_substring("abcabcbb") == 3
puts longest_substring("bbbbb") == 1
puts longest_substring("qwerqwe") == 4

def nth_prime_R(n, num=1)
  return num - 1 if n == 0
  
  if is_prime?(num)
    nth_prime_R(n - 1, num += 1)
  else
    nth_prime_R(n, num += 1)
  end
end

def is_prime?(num)
  return false if num == 1
  
  (2...num).each do |el|
    return false if num % el == 0
  end
  
  true
end

puts nth_prime_R(1) == 2
puts nth_prime_R(2) == 3
puts nth_prime_R(3) == 5
puts nth_prime_R(4) == 7
puts nth_prime_R(5) == 11

def sort(arr)
  sorted_arr = []
  
  until arr.empty?
    largest = arr[0]
    largest_idx = 0
    
    arr.each_with_index do |el, idx|
      if el > largest
        largest = el
        largest_idx = idx
      end
    end
    
    arr = arr[0...largest_idx] + arr[largest_idx + 1..-1]
    sorted_arr.unshift(largest)
  end
  
  sorted_arr
end

puts sort([5, 4, 3, 2, 1]) == [1,2,3,4,5]
puts sort([5, 4, 3, 2, 1].shuffle) == [1,2,3,4,5]


# version one of is valid ip
def is_valid_ip?(str)
  start_idx = 0
  period_idx = 0
  periods = 0
  arr = []
  
  str.each_char.with_index do |char, idx|
    next unless char == '.'
    periods += 1
    period_idx = idx
    arr << str[start_idx...period_idx].to_i
    start_idx = period_idx + 1
  end
  
  arr << str[period_idx + 1..-1].to_i
  return false unless periods == 3
  arr.all? {|el| el >= 0 && el <= 255}
end

# version two of is valid ip
def is_valid_ip?(str)
  nums = str.split('.').map {|el| el.to_i}
  nums.all? {|el| el >= 0 && el <= 255} &&
  nums.length == 4
end

puts is_valid_ip?('0.0.0.0') == true
puts is_valid_ip?('255.255.255.255') == true
puts is_valid_ip?('256.255.255.255') == false
puts is_valid_ip?('255.255.255') == false


# pair sum in O(n) time
def pair_sum(arr, k)
  hash = {}
  seen = {}
  counts = Hash.new(0)
  res = []
  
  arr.each do |el|
    hash[el] = k - el
    counts[el] += 1
  end
  doubles = counts.select {|k, v| v > 1}
  arr.each do |el|
    if hash[hash[el]] && !seen[hash[el]] && (doubles[el] || el != hash[el])
      res.push([el, hash[el]])
    end
    seen[el] = true
  end
  
  res
end

puts pair_sum([1,2,3], 4) == [[1,3]]
puts pair_sum([1,2,2,3], 4) == [[1,3], [2,2]]
puts pair_sum([0,12,4,-2,6,5,5,10],10) == [[0, 10], [12, -2], [4, 6], [5,5]]
puts pair_sum([1,2,3,4],8) == []


# a key pad with buttons 0-9 is to be used to print out numbers. Print the steps the keypad has to take to get to each number.
# numbers greater than 9 are to be broken down into digits.
def keypad_print(arr, current_pos=0)
  arr.each do |el|
    if el > 9
      current_pos = keypad_print(digitize(el), current_pos)
    else
      print_key(el, current_pos)
      current_pos = el
      puts "tap"
    end
  end
  
  current_pos
end

def digitize(num)
  res_arr = []
  while num > 9
    res_arr.unshift(num % 10)
    num /= 10
  end
  res_arr.unshift(num)
  
  res_arr
end

def print_key(key, current_pos)
  value = key - current_pos
  if value > 0
    puts "right #{value}"
  elsif value < 0
    puts "left #{-value}"
  end
end

keypad_print([5,8,4,129])


# Compare the Triplets
#!/bin/ruby

#
# Complete the solve function below.
#
def solve(a0, a1, a2, b0, b1, b2)
    #
    # Write your code here.
    #
    a = [a0, a1, a2]
    b = [b0, b1, b2]
    alice = 0
    bob = 0
    i = 0
    
    while i < 3
        case a[i] <=> b[i]
        when 1
            alice += 1
        when -1
            bob += 1
        end
        i += 1
    end
    [alice, bob]  
end

fp = File.open(ENV['OUTPUT_PATH'], 'w')

a0A1A2 = gets.rstrip.split

a0 = a0A1A2[0].to_i

a1 = a0A1A2[1].to_i

a2 = a0A1A2[2].to_i

b0B1B2 = gets.rstrip.split

b0 = b0B1B2[0].to_i

b1 = b0B1B2[1].to_i

b2 = b0B1B2[2].to_i

result = solve a0, a1, a2, b0, b1, b2

fp.write result.join " "
fp.write "\n"

fp.close()

# Diagonal Difference
#!/bin/ruby

#
# Complete the diagonalDifference function below.
#
def diagonalDifference(a)
    #
    # Write your code here.
    #
    (primary_sum(a) - secondary_sum(a)).abs
# return int difference of diagonals
end

def primary_sum(a)
    sum = 0
    i = 0
    j = 0
    while i < a.length
        sum += a[i][j]
        i += 1
        j += 1
    end
    sum
#     return primary sum
end

def secondary_sum(a)
    sum = 0
    i = 0
    j = a.length - 1
    while i < a.length
        sum += a[i][j]
        i += 1
        j -= 1
    end
    sum
#     return secondary sum
end

fp = File.open(ENV['OUTPUT_PATH'], 'w')

n = gets.to_i

a = Array.new(n)

n.times do |a_row_itr|
    a[a_row_itr] = gets.rstrip.split(' ').map(&:to_i)
end

result = diagonalDifference a

fp.write result
fp.write "\n"

fp.close()


