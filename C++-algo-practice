// solveMeFirst
// written in C
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


int solveMeFirst(int a, int b) {
    // Hint: Type return a+b; below
    return a + b;
 
}
int main() {
    int num1,num2;
    scanf("%d %d",&num1,&num2);
    int sum; 
    sum = solveMeFirst(num1,num2);
    printf("%d",sum);
    return 0;
}

// simpleArraySum
#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

/*
 * Complete the simpleArraySum function below.
 */
int simpleArraySum(int n, vector<int> ar) {
    /*
     * Write your code here.
     */
    int sum = 0;
    for (int i=0; i<n; i++) {
        sum += ar[i];
    }
    return sum;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string ar_temp_temp;
    getline(cin, ar_temp_temp);

    vector<string> ar_temp = split_string(ar_temp_temp);

    vector<int> ar(n);

    for (int ar_itr = 0; ar_itr < n; ar_itr++) {
        int ar_item = stoi(ar_temp[ar_itr]);

        ar[ar_itr] = ar_item;
    }

    int result = simpleArraySum(n, ar);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

// Input and Output
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int num1, num2, num3, sum;
    cin >> num1 >> num2 >> num3;
    sum = num1 + num2 + num3;
    cout << sum;
    return 0;
}


// Basic Data Types
#include <iostream>
#include <cstdio>
using namespace std;

int main() {
    // Complete the code.
    int i;
    long l;
    char c;
    float f;
    double d;
    scanf("%d %ld %c %f %lf", &i, &l, &c, &f, &d);
    printf("%d\n%ld\n%c\n%.3f\n%.9lf\n", i, l, c, f, d);
    return 0;
}

// print odd evens
#include <iostream>
#include <cstdio>
using namespace std;

int print_num(int num) {
    switch(num) {
        case 1: cout << "one" << "\n";
            break;
        case 2: cout << "two" << "\n";
            break;
        case 3: cout << "three" << "\n";
            break;
        case 4: cout << "four" << "\n";
            break;
        case 5: cout << "five" << "\n";
            break;
        case 6: cout << "six" << "\n";
            break;
        case 7: cout << "seven" << "\n";
            break;
        case 8: cout << "eight" << "\n";
            break;
        case 9: cout << "nine" << "\n";
            break;
    }
    return 0;
}

int even_odd(int num) {
    if (num % 2 == 0) {
        cout << "even" << "\n";
    } else {
        cout << "odd" << "\n";
    }
    return 0;
}

int main() {
    // Complete the code.
    int start, end;
    cin >> start >> end;
    for (start; start <= end; start++) {
        if (start < 10) {
            print_num(start);
        } else {
            even_odd(start);
        }
    }
    return 0;
}

// Pointer
#include <stdio.h>
#include <cmath>        // std::abs

void update(int *a,int *b) {
    // Complete this function
    int a_val = *a;
    int b_val = *b;
    *a = a_val + b_val;
    *b = std::abs (a_val - b_val);
}

int main() {
    int a, b;
    int *pa = &a, *pb = &b;
    
    scanf("%d %d", &a, &b);
    update(pa, pb);
    printf("%d\n%d", a, b);

    return 0;
}
