"""
 Print elements of a linked list on console
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 
"""
def print_list(head):
  while head:
    print head.data
    head = head.next
  
"""
 Insert Node at the end of a linked list 
 head pointer input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 return back the head of the linked list in the below method
"""

def Insert(head, data):
    if head is None:
        return Node(data, None)
    else:
        temp = head
        while temp != None:
            last_node = temp
            temp = temp.next
        insert_node = Node(data, None)
        last_node.next = insert_node
        return head
        
 """
 Insert Node at a specific position in a linked list
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method. 

"""
def InsertNth(head, data, position):
    current_pos = 0
    if head is None or position == 0:
        return Node(data, head)
    else:
        temp = head
        next_node = head.next
        prev_node = head
        while current_pos != position:
            prev_node = temp
            next_node = temp.next
            temp = temp.next
            current_pos += 1
        prev_node.next = Node(data, next_node)
        return head

"""
 Delete Node at a given position in a linked list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method. 

"""

def Delete(head, position):
    if head is None or position == 0:
        return head.next
    else:
        current_node = 0
        temp = head
        prev_node = head
        next_node = head.next
        
        while current_node != position:
            prev_node = temp
            temp = temp.next
            next_node = temp.next
            current_node += 1
            
        prev_node.next = next_node
        return head


"""
 Print elements of a linked list in reverse order as standard output
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 
"""

def ReversePrint(head):
    node_list = []
    temp = head
    while temp:
        node_list.insert(0, temp.data)
        temp = temp.next
    for i in node_list:
        print i
  
  """
 Print elements of a linked list on console recursivly
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 
"""
def print_list(head):
    if head:
        print head.data
        print_list(head.next)

"""
 Reverse a linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""

def Reverse(head):
    node_list = [] 
#     make a new stack
    
    if head is None or head.next is None:
        return head
#     can't reverse a null list
    else:
#         create the stack
        temp = head
        while temp:
            node_list.append(temp.data)
            temp = temp.next
#     empty the stack
        new_head = Node(node_list.pop(), None)
        next_node = Node(node_list.pop(), None)
        new_head.next = next_node
        
        while len(node_list) > 0:
            next_node.next = Node(node_list.pop(), None)
            next_node = next_node.next
        return new_head

"""
 Compare two linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""

def CompareLists(headA, headB):
    temp_a = headA
    temp_b = headB
    
    while temp_a or temp_b:
        if temp_a is None or temp_b is None:
            return 0
        if temp_a.data != temp_b.data:
            return 0
        else:
            temp_a = temp_a.next
            temp_b = temp_b.next
    return 1
  
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def preOrder(root):
    #Write your code here
    if root:
        print root.data,
        preOrder(root.left)
        preOrder(root.right)

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def postOrder(root):
    #Write your code here
    if root:
        postOrder(root.left)
        postOrder(root.right)
        print root.data,


"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def postOrder(root):
    #Write your code here
    tree_data = []
    if root:
        tree_data.insert(0, root.data)
        postOrder(root.left)
        postOrder(root.right)
    for i in tree_data:
        print i,

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def inOrder(root):
    #Write your code here
    if root:
        inOrder(root.left)
        print root.data,
        inOrder(root.right)

    right_height = 0
    left_height = 0
    
    if root is None:
        return -1
    
    right_height = 1 + height(root.right)
    left_height = 1 + height(root.left)
    
    if right_height > left_height:
        return right_height
    else:
        return left_height
        
 """
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def levelOrder(root):
   #Write code Here
    q = [root]
    while len(q) > 0:
        node = q.pop(0)
        print node.data,
        if node.left:
            q.append(node.left)
        if node.right:
            q.append(node.right)
 
 
"""
Binary Search Tree : Insertion
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)"""

def insert(r,val):
   #Enter you code here.
    if r is None:
        return Node(val)
    if r.data and val < r.data:
        if r.left:
            insert(r.left, val)
        else:
            r.left = Node(val)
    if r.data and val > r.data:
        if r.right:
            insert(r.right, val)
        else:
            r.right = Node(val)
    return r
         
#!/bin/python
#2D Array - DS
import sys


arr = []
for arr_i in xrange(6):
    arr_temp = map(int,raw_input().strip().split(' '))
    arr.append(arr_temp)

values = []
for i in range(len(arr)-2):
    for j in range(len(arr)-2):
        values.append(arr[i][j]+arr[i][j+1]+arr[i][j+2]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2])
        
print(max(values))

# Arrays: Left Rotation
def array_left_rotation(a, n, k):
    while k > 0:
        el = a.pop(0)
        a.append(el)
        k -= 1
    return a

n, k = map(int, raw_input().strip().split(' '))
a = map(int, raw_input().strip().split(' '))
answer = array_left_rotation(a, n, k);
print ' '.join(map(str,answer))

# is Binary Search Tree
""" Node is defined as
class node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
"""

def checkBST(root, min=None, max=None):
    if root is None:
        return True
    if (min and (min >= root.data)) or (max and (max <= root.data)):
        return False
    return checkBST(root.left, min, root.data) and checkBST(root.right, root.data, max)

# Strings: Making Anagrams
def number_needed(a, b):
    for i in a:
        if i in b:
            b = b.replace(i, '', 1)
            a = a.replace(i, '', 1)
    return len(a) + len(b)

a = raw_input().strip()
b = raw_input().strip()

print number_needed(a, b)

# Hash Tables: Ransom Note
from collections import defaultdict
def ransom_note(magazine, ransom):
    mag = defaultdict(lambda: 0)
    ran = defaultdict(lambda: 0)
    
    for word in magazine:
        mag[word] += 1
    for word in ransom:
        ran[word] += 1
    
    for word in ransom:
        if mag[word] is None or mag[word] < ran[word]:
            return False
    return True

m, n = map(int, raw_input().strip().split(' '))
magazine = raw_input().strip().split(' ')
ransom = raw_input().strip().split(' ')
answer = ransom_note(magazine, ransom)
if(answer):
    print "Yes"
else:
    print "No
   
   
"""
Linked Lists: Detect a Cycle
Detect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.

A Node is defined as: 
 
    class Node(object):
        def __init__(self, data = None, next_node = None):
            self.data = data
            self.next = next_node
"""

def has_cycle(head):
    if head is None:
        return False
    temp = head
    node_list = []
    while temp:
        if temp in node_list:
            return True
        node_list.append(temp)
        temp = temp.next
    return False
   

# Stacks: Balanced Brackets
def is_matched(expression):
    stack = []
    BRACKETS = ['[]', '{}', '()']

    for i in expression:
        stack.append(i)
        if len(stack) >= 2 and (stack[-2] + stack[-1]) in BRACKETS:
            stack.pop()
            stack.pop()
            
    if len(stack) > 0:
        return False
    else:
        return True

t = int(raw_input().strip())
for a0 in xrange(t):
    expression = raw_input().strip()
    if is_matched(expression) == True:
        print "YES"
    else:
        print "NO"

# Queues: A Tale of Two Stacks
class MyQueue(object):
    def __init__(self):
        self.first = []
        self.second = []
    
    def peek(self):
        return self.first[0]
        
    def pop(self):
        self.second.append(self.first.pop(0))
        
    def put(self, value):
        self.first.append(value)

queue = MyQueue()
t = int(raw_input())
for line in xrange(t):
    values = map(int, raw_input().split())
    
    if values[0] == 1:
        queue.put(values[1])        
    elif values[0] == 2:
        queue.pop()
    else:
        print queue.peek()


# Sorting: Bubble Sort
n = int(raw_input().strip())
a = map(int, raw_input().strip().split(' '))

def bubble_sort(a):
    swaps = 0
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
                swaps += 1
            j += 1
        i += 1
    return swaps
        
swaps = bubble_sort(a)
print "Array is sorted in %s swaps." % swaps
print "First Element: %d" % a[0]
print "Last Element: %d" % a[-1]

# Enter your code here. Read input from STDIN. Print output to STDOUT
class Player:
    def __init__(self, name, score):
        self.name = name
        self.score = score
        
    # def __repr__(self):
        
    def comparator(a, b):
        if a.score < b.score:
            return 1
        if a.score > b.score:
            return -1
        if a.name < b.name:
            return -1
        if a.name > b.name:
            return 1
        return 0
 
 
# Time Complexity: Primality 
from math import sqrt

def is_prime(num):
    s_root = int(sqrt(num)) + 1
    if num < 2:
        return False
    elif num == 2 or num == 3 or num == 5 or num == 7:
        return True
    elif num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0:
        return False
    else:
        for i in range(9, s_root, 2):
            if num % i == 0:
                return False
    return True
    
p = int(raw_input().strip())
for _ in xrange(p):
    n = int(raw_input().strip())
    if is_prime(n):
        print "Prime"
    else:
        print "Not prime"
        

# Binary Search Tree : Lowest Common Ancestor
 """
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def lca(root , v1 , v2):
  #Enter your code here
    node = root
    while node:
        if max(v1, v2) < node.data:
            node = node.left
        elif min(v1, v2) > node.data:
            node = node.right
        else:
            break
    return node
    
   
# Tree: Height of a Binary Tree   
# Enter your code here. Read input from STDIN. Print output to STDOUT
'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 
           

       // this is a node of the tree , which contains info as data, left , right
'''
def height(root):
    if root is None:
        return -1
    
    right_height = 1 + height(root.right)
    left_height = 1 + height(root.left)
    
    return max(right_height, left_height)


# Recursion: Davis' Staircase
dict = {0:0, 1:1, 2:2, 3:4}

def steps(n):
    if n in dict.keys():
        return dict.get(n)
    result = steps(n - 3) + steps(n - 2) + steps(n - 1)
    dict.update({n: result})
    return dict.get(n)
    
s = int(raw_input().strip())
for a0 in xrange(s):
    n = int(raw_input().strip())
    print steps(n)
    
    
    
# Merge two sorted linked lists
"""
 Merge two linked lists
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""
def MergeLists(headA, headB):
    if headA is None and headB is None:
        return None
    if headA is None:
        return headB
    if headB is None:
        return headA
    
    tempA = headA
    tempB = headB
    if tempA.data < tempB.data:
        new_head = tempA
        tempA = tempA.next
    else:
        new_head = tempB
        tempB = tempB.next
        
    new_list = new_head
    while tempA or tempB:
        if tempA is None:
            new_list.next = tempB
            tempB = tempB.next
            new_list = new_list.next
        elif tempB is None:
            new_list.next = tempA
            tempA = tempA.next
            new_list = new_list.next
        elif tempA.data < tempB.data:
            new_list.next = tempA
            tempA = tempA.next
            new_list = new_list.next
        elif tempA.data > tempB.data:
            new_list.next = tempB
            tempB = tempB.next
            new_list = new_list.next
    return new_head
    

# Get Node Value
#Body
"""
 Get Node data of the Nth Node from the end.
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the node data of the linked list in the below method.
"""

def GetNode(head, position, stack=[]):
    if head is None:
        return None
    
    stack.insert(0, head.data)
    GetNode(head.next, position, stack)
    
    return stack[position]
  
  
  
  # Delete duplicate-value nodes from a sorted linked list
  """
 Delete duplicate nodes
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""

def RemoveDuplicates(head):
    if head is None:
        return None
    
    seen = {head.data: True}
    previous = head
    temp = head.next
    while temp:
        if temp.data in seen:
            previous.next = temp.next
            temp = temp.next
        else:
            seen[temp.data] = True
            previous = previous.next
            temp = temp.next
    return head
        
  
  
#  Cycle Detection
"""
Detect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.

A Node is defined as: 
 
    class Node(object):
        def __init__(self, data = None, next_node = None):
            self.data = data
            self.next = next_node
"""

def has_cycle(head):
    if head is None:
        return False
    
    seen = {head.data: True}
    temp = head.next
    while temp:
        if temp.data in seen:
            return True
        else:
            seen[temp.data] = True
            temp = temp.next
    return False
        
    
    """
 Reverse a doubly linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None, prev_node = None):
       self.data = data
       self.next = next_node
       self.prev = prev_node

 return the head node of the updated list 
"""
def Reverse(head):
    if head.next is None:
        return head
    temp = head
    while temp.next:
        temp = temp.next
    new_head = temp
    while temp:
        temp.next, temp.prev = temp.prev, temp.next
        temp = temp.next
    return new_head
    
 
