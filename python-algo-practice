"""
 Print elements of a linked list on console
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 
"""
def print_list(head):
  while head:
    print head.data
    head = head.next
  
"""
 Insert Node at the end of a linked list 
 head pointer input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 return back the head of the linked list in the below method
"""

def Insert(head, data):
    if head is None:
        return Node(data, None)
    else:
        temp = head
        while temp != None:
            last_node = temp
            temp = temp.next
        insert_node = Node(data, None)
        last_node.next = insert_node
        return head
        
 """
 Insert Node at a specific position in a linked list
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method. 

"""
def InsertNth(head, data, position):
    current_pos = 0
    if head is None or position == 0:
        return Node(data, head)
    else:
        temp = head
        next_node = head.next
        prev_node = head
        while current_pos != position:
            prev_node = temp
            next_node = temp.next
            temp = temp.next
            current_pos += 1
        prev_node.next = Node(data, next_node)
        return head

"""
 Delete Node at a given position in a linked list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method. 

"""

def Delete(head, position):
    if head is None or position == 0:
        return head.next
    else:
        current_node = 0
        temp = head
        prev_node = head
        next_node = head.next
        
        while current_node != position:
            prev_node = temp
            temp = temp.next
            next_node = temp.next
            current_node += 1
            
        prev_node.next = next_node
        return head


"""
 Print elements of a linked list in reverse order as standard output
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 
"""

def ReversePrint(head):
    node_list = []
    temp = head
    while temp:
        node_list.insert(0, temp.data)
        temp = temp.next
    for i in node_list:
        print i
  
  """
 Print elements of a linked list on console recursivly
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 
"""
def print_list(head):
    if head:
        print head.data
        print_list(head.next)

"""
 Reverse a linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""

def Reverse(head):
    node_list = [] 
#     make a new stack
    
    if head is None or head.next is None:
        return head
#     can't reverse a null list
    else:
#         create the stack
        temp = head
        while temp:
            node_list.append(temp.data)
            temp = temp.next
#     empty the stack
        new_head = Node(node_list.pop(), None)
        next_node = Node(node_list.pop(), None)
        new_head.next = next_node
        
        while len(node_list) > 0:
            next_node.next = Node(node_list.pop(), None)
            next_node = next_node.next
        return new_head

"""
 Compare two linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node

 return back the head of the linked list in the below method.
"""

def CompareLists(headA, headB):
    temp_a = headA
    temp_b = headB
    
    while temp_a or temp_b:
        if temp_a is None or temp_b is None:
            return 0
        if temp_a.data != temp_b.data:
            return 0
        else:
            temp_a = temp_a.next
            temp_b = temp_b.next
    return 1
  
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def preOrder(root):
    #Write your code here
    if root:
        print root.data,
        preOrder(root.left)
        preOrder(root.right)
 
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def postOrder(root):
    #Write your code here
    tree_data = []
    if root:
        tree_data.insert(0, root.data)
        postOrder(root.left)
        postOrder(root.right)
    for i in tree_data:
        print i,
